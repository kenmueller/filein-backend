rules_version = '2'

service cloud.firestore {
	match /databases/{database}/documents {
		match /users/{uid} {
			allow read
			allow create: if
				isSignedInWith(uid) &&
				isNotEmpty(getNewData().name) &&
				isNotEmpty(getNewData().email) &&
				isZero(getNewData().files) &&
				isZero(getNewData().comments)
			allow update: if
				isSignedInWith(uid) &&
				onlyUpdatedFields(['name']) &&
				isNotEmpty(getNewData().name)
		}
		
		match /files/{fileId} {
			allow read
			allow create: if
				isOptionallySignedInWith(getNewData().owner) &&
				isZero(getNewData().comments) &&
				getNewData().public is bool
			allow update: if
				isSignedInWith(getOldData().owner) && (
					(onlyUpdatedFields(['name']) && isNotEmpty(getNewData().name)) ||
					(onlyUpdatedFields(['public']) && getNewData().public is bool)
				)
			allow delete: if
				isSignedInWith(getOldData().owner)
			
			match /comments/{commentId} {
				allow read
				allow create: if
					isSignedInWith(getNewData().from) &&
					isNotEmpty(getNewData().body)
			}
		}
		
		function isSignedIn() {
			return request.auth != null
		}
		
		function isSignedInWith(uid) {
			return isSignedIn() && request.auth.uid == uid
		}
		
		function isOptionallySignedInWith(uid) {
			return uid == null || isSignedInWith(uid)
		}
		
		function getNewData() {
			return request.resource.data
		}
		
		function getOldData() {
			return resource.data
		}
		
		function onlyUpdatedFields(fields) {
			return getNewData().diff(getOldData()).affectedKeys().hasOnly(fields)
		}
		
		function isZero(num) {
			return num is int && num == 0
		}
		
		function isNotEmpty(str) {
			return str is string && str.size() > 0
		}
	}
}
